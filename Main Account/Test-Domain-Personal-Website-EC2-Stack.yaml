AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CFT to create Ec2 Instance for hosting my personal website.
Parameters:
  AppName:
    Type: String
    Description: App name which is used to create folder in home directory of the ec2 where code is pulled.
    AllowedPattern: ^[a-z][a-z0-9-]*$
  GitUrl:
    Type: String
    Description: Url of the git repo that needs to pulled into the app directory.
    AllowedPattern: https://(www[.])?github\.com/.*[.]git$
  GitBranchName:
    Type: String
    Description: Name of the branch that should be pulled from the GitHub.
    Default: master
    MinLength: 1
  SshCidr:
    Type: String
    Description: Cidr Ip address that is allowed to ssh into the ec2 machine.
    AllowedPattern: |-
      ^(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)/(3[0-2]|[1-2]?\d)$

Resources:
  PersonalWebsiteEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-08795883c7b4b7140
      InstanceType: t4g.small
      KeyName: PersonalWebsiteEc2SshKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref PersonalWebsiteEc2SecurityGroup
          SubnetId: !ImportValue TestDomainPublicSubnet1Id
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 10
            DeleteOnTermination: true
      InstanceInitiatedShutdownBehavior: stop
      PropagateTagsToVolumeOnCreation: true
      EbsOptimized: true
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/usr/bin/env bash
            
            sudo apt update && sudo apt upgrade
            
            # Setup node.js, pnpm and pm2
            sudo apt install -y curl
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install -g --upgrade npm pm2
            
            # Setup nginx
            sudo apt install -y nginx
            
            cd /etc/nginx/sites-available
            sudo cat > default <<EOF
            # Credits: Hikaru Hokkyokusei
            server {
                listen       443 ssl http2 default_server;
                listen       [::]:443 ssl http2 default_server;
                server_name  hikaru-hokkyokusei.com;

                ssl_certificate				ssl-certificates/personal-website/certificate.crt;
                ssl_certificate_key			ssl-certificates/personal-website/privateKey.key;
                ssl_session_cache			shared:SSL:1m;
                ssl_session_timeout			10m;
                ssl_ciphers					HIGH:!aNULL:!MD5;
                ssl_prefer_server_ciphers	on;

                location ~ /ws {
                    proxy_pass                http://localhost:6969;
                    proxy_read_timeout        60;
                    proxy_connect_timeout     60;
                    proxy_redirect            off;

                    proxy_http_version  1.1;
                    proxy_set_header    Upgrade $http_upgrade;
                    proxy_set_header    Connection 'upgrade';
                    proxy_set_header    Host $host;
                    proxy_cache_bypass  $http_upgrade;
                }

                location / {
                    proxy_pass http://localhost:6969/;
                }
            }
            EOF
            
            # Setup docker
            sudo apt-get update
            sudo apt-get install ca-certificates curl gnupg
            sudo mkdir -m 0755 -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo apt install -y docker-compose
            sudo systemctl enable docker.service
            sudo systemctl enable containerd.service
            
            # App setup
            cd /home/ubuntu
            mkdir ${AppName}
            cd ${AppName}
            git init
            git branch -m ${GitBranchName}
            git pull ${GitUrl} ${GitBranchName}
            
            touch .env
            touch run.sh
            
            cat >.env <<EOF
            DOCKER_VERSION_TAG=0.0.0
            PORT=6969
            
            EnvName=prd
            AllowedOrigins=hikaru-hokkyokusei.com
            EOF
            
            cat >run.sh <<EOF
            #!/usr/bin/env bash
            
            cd /home/ubuntu/${AppName} || exit
            sudo docker-compose up
            EOF
            
            # Starting the application
            pm2 start run.sh
      Tags:
        - Key: Name
          Value: PersonalWebsiteEc2Instance

  PersonalWebsiteEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PersonalWebsiteEc2SecurityGroup
      GroupDescription: Enable SSH access and allow HTTP(s) traffic from internet for the Personal Website EC2 Instances.
      VpcId: !ImportValue TestDomainVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0